#!/usr/bin/env bash
#
# Created:         Mi 2021-02-17 21:23:22 CET
# Last Modified:   Do 2021-05-13 18:14:05 CEST
#
# bingdaily:
#   Downloads the daily Bing wallpaper

# Help text
usage () {
cat << EOF

Usage: bingdaily [options]

This script will download the daily Bing wallpaper.

OPTIONS:
   -p PATH        Select download location
   -m MARKET      Select market (default: de-DE)
   -d DAY         Select day (default: 0=current, 1=yesterday, ...)
   -r RESOLUTION  Select image resolution (default: UHD)
   -l             Add wallpaper title to picture
   -y             Create output directories and files without asking
   -q             Quiet mode
   -h             Show this message
EOF
}

# Echo error messages on STDERR
echoerr () { cat <<< "$@" 1>&2; }

# Overwrite exxisting files
YES=0

# Resolution
RESOLUTION="UHD"

# Market for image
MARKET="de-DE"

# Collection Path
OUTDIR="$(xdg-user-dir PICTURES)/Bing"

# Add label
LABEL=0

# For day (0=current; 1=yesterday... so on)
DAY=0

# Quiet mode
QUIET=0

# Process options
while getopts p:m:d:lr:yqh OPTION
do
    case "${OPTION}"
    in
        p)  OUTDIR=${OPTARG}
            ;;
        m)  MARKET=${OPTARG}
            ;;
        d)  DAY=${OPTARG}
            ;;
        r)  RESOLUTION=${OPTARG}
            ;;
        l)  LABEL=1
            ;;
        y)  YES=1
            ;;
        q)  QUIET=1
            ;;
        h)  usage
            exit 0
            ;;
        \?) usage
            exit 1
            ;;
    esac
done

# Skip options
shift $((OPTIND-1))

# Switch to quiet mode
[ "${QUIET}" -eq 1 ] && exec 1>/dev/null

# Base URL
BING="https://www.bing.com/"

# Bing API
API="HPImageArchive.aspx?format=js&idx=${DAY}&mkt=${MARKET}&n=1"

# Remove optional trailing slashes
BING=${BING%/}
OUTDIR=${OUTDIR%/}

# Fetch Bing metainfo
RESP=$(wget --quiet --output-document=- "${BING}/${API}")
ecode=$?
if [ "$ecode" -gt 0 ]
then
    echoerr "No connection to ${BING}"
    exit 2
fi

# Fetch image URL
FILEURL=$(echo "${RESP}" | grep -oP 'urlbase\":\"[^\"]*' | cut -d \" -f 3)_${RESOLUTION}.jpg
FILEURL=${BING}/${FILEURL#/}

# Checking if URL exists
if ! wget --quiet --spider --max-redirect 0 "${FILEURL}"
then

    # Default image URL in case the required size is not available
    echo "Switching to default resolution ..."
    FILEURL=${BING}/$(echo "${RESP}" | grep -oP 'url\":\"[^\"]*' | cut -d \" -f 3)

fi

# Fetch startdate
STARTDATE=$(echo "${RESP}" | grep -oP '\"startdate\":\"[^\"]*' | cut -d \" -f 4)

# Fetch title
TITLE=$(echo "${RESP}" | grep -oP 'title\":\"[^\"]*' | cut -d \" -f 3)

# Getting image filename
FILENAME=${FILEURL##*/}
FILENAME=${FILENAME#th?id=OHR.}
FILENAME=${FILENAME%&rf=*}
FILENAME=${STARTDATE}-${FILENAME}

# Logging
echo "Title: ${TITLE}"
echo "URL: ${FILEURL}"

# Check output directory
if [ "${OUTDIR}" == "$(pwd)" ]
then

    # Reset output directory
    OUTDIR=

else

    # Create output directory
    if [ ! -d "${OUTDIR}" ]
    then

        # Check if interactive mode is disabled
        if [ "$YES" -ne 1 ]
        then

            # User message 
            echoerr "Download folder '${OUTDIR}' does not exist."

            # Exit script if quiet mode enabled
            [ "${QUIET}" -eq 1 ] && exit 2

            # User interaction
            while true
            do
                read -r -p "Create it? [Yn] " yn
                case $yn in
                    [Yy]*) break ;;
                    [Nn]*) exit 2 ;;
                esac
            done

        fi

        # Create download folder
        echo "Creating download folder '${OUTDIR}' ..."
        mkdir -p "${OUTDIR}"

    fi

    # Logging
    echo "Folder: ${OUTDIR}"

    # Append trailing slash
    OUTDIR="${OUTDIR}/"

fi

# Check if output file already exists
if [ -f "${OUTDIR}${FILENAME}" ]
then

    # If permission to overwrite is not given
    if [ "${YES}" -ne 1 ]
    then

        # User message
        echoerr "Output file '${OUTDIR}${FILENAME}' already exists."

        # Exit script if quiet mode enabled
        [ "${QUIET}" -eq 1 ] && exit 3

        # User interaction
        while true
        do
            read -r -p "Replace it? [Yn] " yn
            case $yn in
                [Yy]*) break ;;
                [Nn]*) exit 3 ;;
            esac
        done
    fi

    # Remove existing output file
    rm -f "${OUTDIR}${FILENAME}"

fi

# Logging
echo "Filename: ${FILENAME}"

# Set temporary filename
TEMPFILE=$(mktemp --suffix=.jpg -u -t bingdaily-XXXXXX)

# Download image and save to collection
wget --no-clobber --quiet --output-document="${TEMPFILE}" "${FILEURL}"
ecode=$?

# Check exit code
if [ "$ecode" -ne 0 ]
then
    echoerr echo "Status: Failed (wget error: $ecode)"
    exit 4
fi

# Fetch wallpaper dimensions
WIDTH=$(identify -format %w "${TEMPFILE}")
HEIGHT=$(identify -format %h "${TEMPFILE}")

# Logging
echo "Dimensions: ${WIDTH}x${HEIGHT}"

# Check if label is required
if [ "${LABEL}" -eq 1 ]
then

    # Determine height of label
    LABELHEIGHT=$(echo "scale=0; ${HEIGHT}*2./100." | bc)
    LABELHEIGHT=$(( LABELHEIGHT > 80 ? 80 : LABELHEIGHT ))

    # Invoke ImageMagick
    convert -background '#0008' -fill white -gravity center \
        -size ${WIDTH}x${LABELHEIGHT} caption:"${TITLE}" \
        "${TEMPFILE}" +swap -gravity south -composite \
        "${OUTDIR}${FILENAME}"

    rm "${TEMPFILE}"

else

    # Logging
    mv "${TEMPFILE}" "${OUTDIR}${FILENAME}"

fi

# Logging
KBYTES=$(echo "scale=1; $(stat -c %s "${OUTDIR}${FILENAME}")/1024" | bc -l)
echo "Status: ok (${KBYTES} kB written)"
