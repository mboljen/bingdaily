#!/usr/bin/env bash
#
# Created:         Mi 2021-02-17 21:23:22 CET
# Last Modified:   Mo 2021-02-22 01:03:33 CET
#
# bingdaily:
#   Downloads the daily Bing wallpaper

# Help text
usage() {
cat << EOF

Usage: bingdaily [options]

This script will download the daily Bing wallpaper.

OPTIONS:
   -p PATH        Select download location
   -m MARKET      Select market (default: de-DE)
   -d DAY         Select day (default: 0=current, 1=yesterday, ...)
   -r RESOLUTION  Select image resolution (default: UHD)
   -y             Create output directories and files without asking
   -h             Show this message
EOF
}

# Overwrite exxisting files
YES=0

# Resolution
RESOLUTION="UHD"

# Market for image
MARKET="de-DE"

# Collection Path
OUTDIR="$(xdg-user-dir PICTURES)/Bing"

# For day (0=current; 1=yesterday... so on)
DAY=0

# Process options
while getopts p:m:d:r:yh OPTION
do
    case "${OPTION}"
    in
        p)  OUTDIR=${OPTARG}
            ;;
        y)  YES=1
            ;;
        m)  MARKET=${OPTARG}
            ;;
        d)  DAY=${OPTARG}
            ;;
        r)  RESOLUTION=${OPTARG}
            ;;
        h)  usage
            exit 0
            ;;
        \?) usage
            exit 1
            ;;
    esac
done

# Skip options
shift $((OPTIND-1))

# Base URL
BING="https://www.bing.com/"

# Bing API
API="HPImageArchive.aspx?format=js&idx=${DAY}&mkt=${MARKET}&n=1"

# Remove optional trailing slashes
BING=${BING%/}
OUTDIR=${OUTDIR%/}

# Fetch Bing metainfo
RESP=$(wget --quiet --output-document=- "${BING}/${API}")
ecode=$?
if [ "$ecode" -gt 0 ]
then
    echo "No connection to ${BING}"
    exit 2
fi

# Fetch image URL
FILEURL=$(echo "${RESP}" | grep -oP 'urlbase\":\"[^\"]*' | cut -d \" -f 3)_${RESOLUTION}.jpg
FILEURL=${BING}/${FILEURL#/}

# Checking if URL exists
if ! wget --quiet --spider --max-redirect 0 "${FILEURL}"
then

    # Default image URL in case the required size is not available
    echo "Switching to default resolution ..."
    FILEURL=${BING}/$(echo "${RESP}" | grep -oP 'url\":\"[^\"]*' | cut -d \" -f 3)

fi

# Fetch startdate
STARTDATE=$(echo "${RESP}" | grep -oP '\"startdate\":\"[^\"]*' | cut -d \" -f 4)

# Fetch title
TITLE=$(echo "${RESP}" | grep -oP 'title\":\"[^\"]*' | cut -d \" -f 3)

# Getting Image filename.
FILENAME=${FILEURL##*/}
FILENAME=${FILENAME#th?id=OHR.}
FILENAME=${FILENAME%&rf=*}
FILENAME=${STARTDATE}-${FILENAME}

# Logging.
echo "Title: ${TITLE}"
echo "URL: ${FILEURL}"

# Create output directory
if [ ! -d "${OUTDIR}" ]
then

    # Interactive block
    if [ "$YES" -eq 0 ]
    then
        while true
        do
            read -r -p "Download folder '${OUTDIR}' does not exist. Create it? [Yn] " yn
            case $yn in
                [Yy]*) break ;;
                [Nn]*) exit 2 ;;
            esac
        done
    fi

    # Create download folder
    echo "Creating download folder '${OUTDIR}' ..."
    mkdir -p "${OUTDIR}"

fi

echo "Folder: ${OUTDIR}"

# Check if output file already exists
if [ -f "${OUTDIR}/${FILENAME}" ]
then

    # Interactive block
    if [ "${YES}" -eq 0 ]
    then
        while true
        do
            read -r -p "Output file '${OUTDIR}/${FILENAME}' already exists. Replace ot? [Yn] " yn
            case $yn in
                [Yy]*) break ;;
                [Nn]*) exit 3 ;;
            esac
        done
    fi

    # Remvoe existing output file
    rm -f "${OUTDIR}/${FILENAME}"

fi

echo "Filename: ${FILENAME}"

# Download image and save to collection
wget --no-clobber --quiet --output-document="${OUTDIR}/${FILENAME}" "${FILEURL}"
ecode=$?

# Check exit code
if [ "$ecode" -eq 0 ]
then
    KBYTES=$(echo "scale=1; $(stat -c %s "${OUTDIR}/${FILENAME}")/1024" | bc -l)
    echo "Status: ok (${KBYTES} kB written)"
else
    echo "Status: Failed (wget error: $ecode)" >&2
    exit 4
fi
