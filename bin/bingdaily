#!/usr/bin/env bash
#
# Created:         Mi 2021-02-17 21:23:22 CET
# Last Modified:   Sa 2021-05-15 13:46:48 CEST
#
# bingdaily:
#   Downloads the daily Bing wallpaper

# Help text
usage () {
cat << EOF

Usage: bingdaily [options]

This script will download the daily Bing wallpaper.

OPTIONS:
   -p PATH        Select download location (default: current working directory)
   -m MARKET      Select market (default: de-DE)
   -d DAY         Select day (default: 0=current, 1=yesterday, ...)
   -r RESOLUTION  Select image resolution (default: UHD)
   -s FONTSIZE    Set font size of wallpaper title (default: 0)
   -y             Overwrite existing optput files without asking
   -q             Quiet mode
   -h             Show this message
EOF
}

# Echo error messages on STDERR
echoerr () { cat <<< "$@" 1>&2; }

#
declare -a MARKETS=("en-US" "zh-CN" "ja-JP" "en-AU" "en-UK" "de-DE" "en-NZ" "en-CA")

#
declare -a RESOLUTIONS=("UHD" "1920x1200" "1920x1080" "1366x768" "1280x720" "1024x768" "800x600")
    
# Overwrite exxisting files
YES=0

# Resolution
RESOLUTION="UHD"

# Market for image
MARKET="de-DE"

# Collection Path
OUTDIR=

# Font size of wallpaper title
FONTSIZE=0

# For day (0=current; 1=yesterday... so on)
DAY=0

# Quiet mode
QUIET=0

# Process options
while getopts p:m:d:s:r:yqh OPTION
do
    case "${OPTION}"
    in
        p)  OUTDIR=${OPTARG}
            ;;
        m)  MARKET=${OPTARG}
            ;;
        d)  DAY=${OPTARG}
            ;;
        r)  RESOLUTION=${OPTARG}
            ;;
        s)  FONTSIZE=${OPTARG}
            ;;
        y)  YES=1
            ;;
        q)  QUIET=1
            ;;
        h)  usage
            exit 0
            ;;
        \?) usage
            exit 1
            ;;
    esac
done

# Skip options
shift $((OPTIND-1))

# Check if size not a plain number
if ! [[ ${FONTSIZE} =~ ^[0-9]+\.?[0-9]*\%?$ ]]
then
    echoerr "Invalid fontsize: ${FONTSIZE}"
    exit 1
fi

# Verify selected download location
if [[ -n "${OUTDIR}" && ! -d "${OUTDIR}" ]]
then
    echoerr "Download location ${OUTDIR} does not exist"
    exit 1
fi

# Verify selected market
if [[ ! " ${MARKETS[@]} " =~ " ${MARKET} " ]]
then
    echoerr "Invalid market: ${MARKET}, valid options: ${MARKETS[@]}"
    exit 1
fi

# Verify selected resolution
if [[ ! " ${RESOLUTIONS[@]} " =~ " ${RESOLUTION} " ]]
then
    echoerr "Invalid resolution: ${RESOLUTION}, valid options: ${RESOLUTIONS[@]}"
    exit 1
fi

# Switch to quiet mode
[ "${QUIET}" -eq 1 ] && exec 1>/dev/null

# Base URL
BING="https://www.bing.com/"

# Bing API
API="HPImageArchive.aspx?format=js&idx=${DAY}&mkt=${MARKET}&n=1"

# Remove optional trailing slashes
BING=${BING%/}
OUTDIR=${OUTDIR%/}

# Fetch Bing metainfo
RESP=$(wget --quiet --output-document=- "${BING}/${API}")
ecode=$?
if [ "$ecode" -gt 0 ]
then
    echoerr "No connection to ${BING}"
    exit 2
fi

# Fetch image URL
FILEURL=$(echo "${RESP}" | grep -oP 'urlbase\":\"[^\"]*' | cut -d \" -f 3)_${RESOLUTION}.jpg
FILEURL=${BING}/${FILEURL#/}

# Checking if URL exists
if ! wget --quiet --spider --max-redirect 0 "${FILEURL}"
then

    # Default image URL in case the required size is not available
    echo "Switching to default resolution ..."
    FILEURL=${BING}/$(echo "${RESP}" | grep -oP 'url\":\"[^\"]*' | cut -d \" -f 3)

fi

# Fetch startdate
STARTDATE=$(echo "${RESP}" | grep -oP '\"startdate\":\"[^\"]*' | cut -d \" -f 4)

# Fetch title
TITLE=$(echo "${RESP}" | grep -oP 'title\":\"[^\"]*' | cut -d \" -f 3)

# Getting image filename
FILENAME=${FILEURL##*/}
FILENAME=${FILENAME#th?id=OHR.}
FILENAME=${FILENAME%&rf=*}
FILENAME=${STARTDATE}-${FILENAME}

# Logging
echo "Title: ${TITLE}"
echo "URL: ${FILEURL}"

# Add trailing slash
[[ -n "${OUTDIR}" ]] && OUTDIR="${OUTDIR}/"

# Check if output file already exists
if [ -f "${OUTDIR}${FILENAME}" ]
then

    # If permission to overwrite is not given
    if [ "${YES}" -ne 1 ]
    then

        # User message
        echoerr "Output file '${OUTDIR}${FILENAME}' already exists."

        # Exit script if quiet mode enabled
        [ "${QUIET}" -eq 1 ] && exit 3

        # User interaction
        while true
        do
            read -r -p "Replace it? [Yn] " yn
            case $yn in
                [Yy]*) break ;;
                [Nn]*) exit 3 ;;
            esac
        done
    fi

    # Remove existing output file
    rm -f "${OUTDIR}${FILENAME}"

fi

# Logging
echo "Filename: ${FILENAME}"

# Set temporary filename
TEMPFILE=$(mktemp --suffix=.jpg -u -t bingdaily-XXXXXX)

# Download image and save to collection
wget --no-clobber --quiet --output-document="${TEMPFILE}" "${FILEURL}"
ecode=$?

# Check exit code
if [ "$ecode" -ne 0 ]
then
    echoerr echo "Status: Failed (wget error: $ecode)"
    exit 4
fi

# Fetch wallpaper dimensions
WIDTH=$(identify -format %w "${TEMPFILE}")
HEIGHT=$(identify -format %h "${TEMPFILE}")

# Logging
echo "Dimensions: ${WIDTH}x${HEIGHT}"

# Determine absolute fontsize
if [[ ${FONTSIZE} =~ \%$ ]]
then

    # Use value as percentage scaling factor
    FONTSIZE=${FONTSIZE%?}
    FONTSIZE=$(echo "${HEIGHT}*${FONTSIZE}/100" | bc)

elif (( $(echo "${FONTSIZE} < 1.0" | bc -l ) ))
then

    # Convert relative font size to integer
    FONTSIZE=$(echo "${HEIGHT}*${FONTSIZE}/1" | bc)

else

    # Convert absolute font size to integer
    FONTSIZE=$(echo "${FONTSIZE}/1" | bc)

fi


# Check if label is required
if [ "${FONTSIZE}" -eq 0 ]
then

    # Logging
    mv "${TEMPFILE}" "${OUTDIR}${FILENAME}"

else

    # Calculate label height
    LABELHEIGHT=$(echo "${FONTSIZE}*1.5/1" | bc)

    # Logging
    echo "Label fontsize: ${FONTSIZE}"

    # Invoke ImageMagick
    convert -size ${WIDTH}x${LABELHEIGHT} -background '#0008' \
       	-fill white -pointsize ${FONTSIZE} -gravity center caption:"${TITLE}" \
        "${TEMPFILE}" +swap -gravity south -composite \
        "${OUTDIR}${FILENAME}"

    # Remove temporary file
    rm "${TEMPFILE}"

fi

# Logging
KBYTES=$(echo "scale=1; $(stat -c %s "${OUTDIR}${FILENAME}")/1024" | bc -l)
echo "Status: ok (${KBYTES} kB written)"
