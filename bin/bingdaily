#!/usr/bin/env bash
#
# Created:         Mi 2021-02-17 21:23:22 CET
# Last Modified:   Do 2021-02-18 00:56:15 CET
#
# bingdaily:
#   Downloads the daily Bing wallpaper

# Help text
usage() {
cat << EOF

Usage: bingdaily [options]

This script will download the daily Bing wallpaper.

OPTIONS:
   -C DIR         Change directory
   -m MARKET      Select market (default: de-DE)
   -d DAY         Select day (default: 0=current, 1=yesterday, ...)
   -r RESOLUTION  Select image resolution (default: UHD)
   -y             Overwrite existing files
   -h             Show this message
EOF
}

# Overwrite exxisting files
YES=0

# Resolution
RESOLUTION="UHD"

# Market for image
MARKET="de-DE"

# Collection Path
OUTDIR="$(xdg-user-dir PICTURES)/Bing"

# For day (0=current; 1=yesterday... so on)
DAY="0"

# Process options
while getopts C:m:d:r:yh OPTION
do
    case "${OPTION}"
    in
        C)  OUTDIR=${OPTARG}
            ;;
        y)  YES=1
            ;;
        m)  MARKET=${OPTARG}
            ;;
        d)  DAY=${OPTARG}
            ;;
        r)  RESOLUTION=${OPTARG}
            ;;
        h)  usage
            exit 0
            ;;
        \?) usage
            exit 1
            ;;
    esac
done

# Skip options
shift $((OPTIND-1))

# Base URL
BING="https://www.bing.com/"

# Bing API
API="HPImageArchive.aspx?format=js&idx=${DAY}&mkt=${MARKET}&n=1"

# Remove optional trailing slashes
BING=${BING%/}
OUTDIR=${OUTDIR%/}

# Fetch Bing metainfo
echo "Pinging Bing API ... "
RESP=$(wget --quiet --output-document=- "${BING}/${API}")
ecode=$?
if [ "$ecode" -gt 0 ]
then
    echo "No connection to ${BING}"
    exit 1
fi

# Fetch image URL
FILEURL=$(echo "${RESP}" | grep -oP 'urlbase\":\"[^\"]*' | cut -d \" -f 3)_${RESOLUTION}.jpg
FILEURL=${BING}/${FILEURL#/}

# Checking if URL exists
if ! wget --quiet --spider --max-redirect 0 "${FILEURL}"
then

    # Default image URL in case the required size is not available
    echo "Switching to default resolution ..."
    FILEURL=${BING}/$(echo "${RESP}" | grep -oP 'url\":\"[^\"]*' | cut -d \" -f 3)

fi

# Fetch startdate
STARTDATE=$(echo "${RESP}" | grep -oP '\"startdate\":\"[^\"]*' | cut -d \" -f 4)

# Fetch title
TITLE=$(echo "${RESP}" | grep -oP 'title\":\"[^\"]*' | cut -d \" -f 3)

# Getting Image filename.
FILENAME=${FILEURL##*/}
FILENAME=${FILENAME#th?id=OHR.}
FILENAME=${FILENAME%&rf=*}
FILENAME=${STARTDATE}-${FILENAME}

# Logging.
echo "Bing Image of the Day: ${TITLE}"
echo "URL: ${FILEURL}"

# Create output directory
if [ ! -d "${OUTDIR}" ]
then
    echo "Creating output directory ${OUTDIR} ..."
    mkdir -p "${OUTDIR}"
fi

# Check if output file already exists
if [ -f "${OUTDIR}/${FILENAME}" ]
then
    if [ "${YES}" -eq 1 ]
    then
        rm -f "${OUTDIR}/${FILENAME}"
    else
        echo "File \"${OUTDIR}/${FILENAME}\" already exists ..."
        exit 2
    fi
fi

# Download image and save to collection
wget --no-clobber --quiet --output-document="${OUTDIR}/${FILENAME}" "${FILEURL}"
ecode=$?

# Check exit code
if [ "$ecode" -eq 0 ]
then
    KBYTES=$(echo "scale=2; $(stat -c %s "${OUTDIR}/${FILENAME}")/1024" | bc -l)
    echo "Successfully created file \"${OUTDIR}/${FILENAME}\" (${KBYTES} kB written)"
else
    echo "Could not create file (error: $ecode)" >&2
    exit 3
fi
